function [x, f_val, exitflag, output] = bruteforce(fct_optim, x0_mat, lb, ub, fct_con, options)

% number of points
n_sol = size(x0_mat, 1);
idx = true(n_sol, 1);

% boundary
lb = repmat(lb, n_sol, 1);
ub = repmat(ub, n_sol, 1);
[cnq, ceq] = fct_con(x0_mat);

if (~isempty(lb))
    idx = idx&all(x0_mat>=lb, 2);
end
if (~isempty(ub))
    idx = idx&all(x0_mat<=ub, 2);
end
if (~isempty(cnq))
    idx = idx&all(cnq<options.ConstraintToleranceInEq, 2);
end
if (~isempty(ceq))
    idx = idx&all(abs(cnq)<options.ConstraintToleranceEq, 2);
end

nnz(idx)



x = x0_mat(idx,:);

% constraints
idx = true(1, n_sol);

keyboard




% compute
x = x0_mat(idx,:);
f_val = fct_optim(x);

% assign
output.n_sim = n_sol;
output.n_valid = nnz(idx);
if nnz(idx)>0
    exitflag = +1;
else
    exitflag = -1;
end

end